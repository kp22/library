Android Functions:
__________________
Connect to android were:

E:\android_sdk\sdk\platform-tools>adb tcpip 5555
E:\android_sdk\sdk\platform-tools>adb connect 192.168.0.101:5555
connected to 192.168.0.101:5555
__________________
runtime permission:

    public boolean isStoragePermissionGranted() {
        if (Build.VERSION.SDK_INT >= 23) {
            if (checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    == PackageManager.PERMISSION_GRANTED && checkSelfPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE)
                    == PackageManager.PERMISSION_GRANTED && checkSelfPermission(android.Manifest.permission.CAMERA)
                    == PackageManager.PERMISSION_GRANTED) {
                Log.e(TAG, "Permission is granted");
                return true;
            } else {
                Log.e(TAG, "Permission is revoked");
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.CAMERA}, Utils.WRITE_EXTERNAL_STORAGE);

                return false;
            }
        } else { //permission is automatically granted on sdk<23 upon installation
            Log.e(TAG, "Permission is granted");
            return true;
        }
    }
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        switch (requestCode) {
            case Utils.WRITE_EXTERNAL_STORAGE:
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    Log.e(TAG, "Permission: " + permissions[0] + " was " + grantResults[0]);
                    makeFilePath();
                    ChooseProfileImage();
                }
                break;

            default:
                break;
        }
    }
__________________
net On/Off check:

ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
	        android.net.NetworkInfo wifi = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
	        android.net.NetworkInfo datac = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
		
	        if ((wifi != null & datac != null)  && (wifi.isConnected() | datac.isConnected())){
				net ON
			}else{
				net OFF
			}
__________________
util preferences :-

    public static String getStringFromPref(Context context, String key,String defaultVal) {
        String data = "";
        SharedPreferences mySharePrefes = context.getSharedPreferences(context.getResources().getString(R.string.app_name), Activity.MODE_PRIVATE);
        data = mySharePrefes.getString(key, defaultVal);
        return data;
    }

    public static void setStringToPref(Context c, String key, String value) {
        try {
            SharedPreferences mySharePrefs = c.getSharedPreferences(c.getResources().getString(R.string.app_name), Activity.MODE_PRIVATE);
            SharedPreferences.Editor editor = mySharePrefs.edit();
            editor.putString(key, value);
            editor.commit();
        } catch (Exception e) {
        }
    }
__________________
1. Date() + SimpleDateFormat()
DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
Date date = new Date();
System.out.println(dateFormat.format(date)); //2014/08/06 15:59:48

2. Calender() + SimpleDateFormat()
DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
Calendar cal = Calendar.getInstance();
System.out.println(dateFormat.format(cal.getTime())); //2014/08/06 16:00:22
__________________
   public static String formatFileSize(long size) {
        String hrSize = null;

        double m = size;
        double g = (size/1024.0);
        double t = ((size/1024.0)/1024.0);

        DecimalFormat dec = new DecimalFormat("0.00");

        if ( t>1 ) {
            hrSize = dec.format(t).concat(" TB");
        } else if ( g>1 ) {
            hrSize = dec.format(g).concat(" GB");
        } else if ( m>1 ) {
            hrSize = dec.format(m).concat(" MB");
        }
        return hrSize;
    }
__________________
Certificate fingerprints:
C:\Program Files\Java\jdk1.8.0_51\bin

C:\Users\KP Patel\.android>
keytool -list -v -keystore "%USERPROFILE%\.android\debug.keystore" -alias androiddebugkey -storepass android -keypass android
__________________
//this method will return the time difference between two dates
    public int getHrDiffBetweenDates(String startTime, String endTime) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String strDiff = "";

        Date starDate = null;
        Date endDate = null;

        try {
            starDate = sdf.parse(startTime);
            endDate = sdf.parse(endTime);
        } catch (Exception e) {
            Log.e(TAG, "Ex :: " + e.getMessage());
        }
        int hr = 0;
        if (starDate != null && endDate != null) {

            long diff = endDate.getTime() - starDate.getTime();
            int numOfDays = (int) (diff / (1000 * 60 * 60 * 24));
            int hours = (int) (diff / (1000 * 60 * 60));
            hr = hours;
            int minutes = (int) (diff / (1000 * 60) % 60);
            int seconds = (int) (diff / 1000 % 60);
            hr = seconds;
            strDiff = hours + " hours " + minutes + " minutes " + seconds + " seconds";
            Log.e(TAG, "strDiff times::: " + strDiff);
        }
        return hr;
    }
__________________
import rx.Observable;
import rx.Observer;
import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

//rx java and rx android
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    implementation 'io.reactivex:rxandroid:1.2.1'
—————-
Rxjava timer :-

  Subscription subscription;

    private void startRxTimer() {
        subscription = Observable.timer(2, TimeUnit.SECONDS)
                .repeat()
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Long>() {
                    @Override
                    public void onCompleted() {
                        Log.e(TAG, "onCompleted");
                    }

                    @Override
                    public void onError(Throwable e) {
                        Log.e(TAG, "onError");
                    }

                    @Override
                    public void onNext(Long aLong) {
                        Log.e(TAG, "onNext " + aLong);
                    }
                });
    }

    private void stopRxTimer() {
        if (subscription != null) {
            subscription.unsubscribe();
        }
    }
__________________
goto this path for sha1 key:
 
cd C:\Program Files (x86)\Java\jre1.8.0_45\bin


C:\Program Files\Java\jre1.8.0_51\bin>
keytool -list -v -keystore "%USERPROFILE%\.android\debug.keystore" -alias androiddebugkey -storepass android -keypass android
__________________
 convert list to csvString and vice versa

// list to csvString
//        String svn = android.text.TextUtils.join(",", serviceList);
//        Log.e("svn :--: ", svn);

// csvString to list
//        List<String> list = new ArrayList<String>(Arrays.asList(svn.split(",")));
//        for (int i = 0; i < list.size(); i++) {
//            Log.e("svn list :--: ", "" + list.get(i));
//        } 
